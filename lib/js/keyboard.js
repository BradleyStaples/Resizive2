// Generated by CoffeeScript 1.7.1
(function() {
  var Keyboard,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Keyboard = (function() {
    function Keyboard() {
      this.unbindAll = __bind(this.unbindAll, this);
      this.unbind = __bind(this.unbind, this);
      this.bind = __bind(this.bind, this);
    }

    Keyboard.prototype.body = document.body;

    Keyboard.prototype.keys = {
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      e: 69,
      p: 80,
      r: 82,
      s: 83,
      '+': 107,
      '-': 109,
      '?': 191
    };

    Keyboard.prototype.codes = {};

    Keyboard.prototype.methods = ['keydown', 'keyup', 'keypress'];

    Keyboard.prototype.bindings = {
      'keydown': {},
      'keyup': {},
      'keypress': {}
    };

    Keyboard.prototype.isArray = function(value) {
      return Array.isArray || function(value) {
        return {}.toString.call(value === '[object Array]');
      };
    };

    Keyboard.prototype.generateCodes = function() {
      var code, key, _ref, _results;
      _ref = this.keys;
      _results = [];
      for (key in _ref) {
        code = _ref[key];
        _results.push(this.mapCode(key, code));
      }
      return _results;
    };

    Keyboard.prototype.mapCode = function(key, code) {
      return this.codes[code] = key;
    };

    Keyboard.prototype.mapper = function(method, event) {
      var code, func, key, tag;
      code = event.keyCode;
      tag = event.target.tagName.toLowerCase();
      if (tag === 'input' || tag === 'textarea') {
        return false;
      }
      if (!(code in this.codes)) {
        return false;
      }
      key = this.codes[code];
      func = this.bindings[method][key]();
      if (this.doesBindingExist(key, method)) {
        return func();
      }
    };

    Keyboard.prototype.sanitizeMethod = function(method) {
      if (__indexOf.call(this.methods, method) >= 0) {
        return method;
      } else {
        return 'keydown';
      }
    };

    Keyboard.prototype.sanitizeKeys = function(keys) {
      var index, key, validKeys;
      return validKeys = (function() {
        var _i, _len, _results;
        _results = [];
        for (index = _i = 0, _len = keys.length; _i < _len; index = ++_i) {
          key = keys[index];
          _results.push((function(_this) {
            return function(key) {
              if (key in _this.keys) {
                return key;
              }
            };
          })(this)(key));
        }
        return _results;
      }).call(this);
    };

    Keyboard.prototype.doesBindingExist = function(key, method) {
      if (!(method in this.bindings)) {
        return false;
      }
      return key in this.bindings[method];
    };

    Keyboard.prototype.register = function(key, method, func) {
      this.bindings[method][key] = func;
      if (document.addEventListener) {
        this.body.addEventListener(method, this.mapper.bind(this, method), false);
      } else {
        this.body.addEventListener('on' + method, this.mapper.bind(this, method));
      }
      return this.bindings[method][key];
    };

    Keyboard.prototype.unregister = function(key, method) {
      if (document.removeEventListener) {
        this.body.removeEventListener(method, this.mapper.bind(this, method), false);
      } else {
        this.body.detachEvent(method, this.mapper.bind(this, method));
      }
      return delete this.bindings[method][key];
    };

    Keyboard.prototype.unbindMethod = function(method) {
      var key, _results;
      _results = [];
      for (key in this.keys) {
        _results.push(unbind(key, method));
      }
      return _results;
    };

    Keyboard.prototype.bind = function(keys, method, func) {
      var index, key, _i, _len, _results;
      if (!this.isArray(keys)) {
        keys = [keys];
      }
      keys = this.sanitizeKeys(keys);
      method = this.sanitizeMethod(method);
      _results = [];
      for (index = _i = 0, _len = keys.length; _i < _len; index = ++_i) {
        key = keys[index];
        _results.push((function(_this) {
          return function(key) {
            if (!_this.doesBindingExist(key, method)) {
              return _this.register(key, method, func);
            }
          };
        })(this)(key));
      }
      return _results;
    };

    Keyboard.prototype.unbind = function(key, method) {
      if (!(key in this.keys)) {
        return false;
      }
      method = this.sanitizeMethod(method);
      if (!this.doesBindingExist(key, method)) {
        return;
      }
      return this.unregister(key, method);
    };

    Keyboard.prototype.unbindAll = function() {
      var method, _i, _len, _ref, _results;
      _ref = this.methods;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        method = _ref[_i];
        _results.push(this.unbindMethod(method));
      }
      return _results;
    };

    return Keyboard;

  })();

  $(function() {
    window.Keyboard = new Keyboard();
    return window.Keyboard.generateCodes();
  });

}).call(this);
