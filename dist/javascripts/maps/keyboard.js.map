{"version":3,"sources":["keyboard.coffee"],"names":[],"mappings":"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","file":"keyboard.js","sourceRoot":"/source/","sourcesContent":["class Keyboard\n\n    body: document.body\n\n    keys:\n        left: 37\n        up: 38\n        right: 39\n        down: 40\n        e: 69\n        p: 80\n        r: 82\n        s: 83\n        '+': 107\n        '-': 109\n        '?': 191\n\n    codes: {}\n\n    methods: ['keydown', 'keyup', 'keypress']\n\n    bindings: {\n        'keydown': {}\n        'keyup': {}\n        'keypress': {}\n    }\n\n    isArray: (value) ->\n        s = '[object Array]'\n        Array.isArray or (value) -> return {}.toString.call value is s\n\n    generateCodes: ->\n        @mapCode key, code for key, code of @keys\n\n    mapCode: (key, code) ->\n        @codes[code] = key\n\n    mapper: (method, event) ->\n        code = event.keyCode\n        tag = event.target.tagName.toLowerCase()\n        if tag is 'input' or tag is 'textarea' then return false\n        if code not of @codes then return false\n        key = @codes[code]\n        func = @bindings[method][key]()\n        func() if @doesBindingExist key, method\n            \n    sanitizeMethod: (method) ->\n        if method in @methods then return method else return 'keydown'\n\n    sanitizeKeys: (keys) ->\n        validKeys = for key, index in keys\n            do (key) =>\n                if key of @keys\n                    return key\n\n\n    doesBindingExist: (key, method) ->\n        if method not of @bindings then return false\n        return key of @bindings[method]\n\n    register: (key, method, func) ->\n        @bindings[method][key] = func\n        if document.addEventListener\n            @body.addEventListener method, @mapper.bind(this, method), false\n        else\n            @body.addEventListener 'on' + method, @mapper.bind(this, method)\n        return @bindings[method][key]\n\n    unregister: (key, method) ->\n        if document.removeEventListener\n            @body.removeEventListener method, @mapper.bind(this, method), false\n        else\n            @body.detachEvent method, @mapper.bind(this, method)\n        delete @bindings[method][key]\n\n    unbindMethod: (method) ->\n        unbind key, method for key of @keys\n\n    bind: (keys, method, func) =>\n        if not @isArray keys\n            keys = [keys]\n        keys = @sanitizeKeys keys\n        method = @sanitizeMethod method\n        for key, index in keys\n            do (key) =>\n                if not @doesBindingExist(key, method)\n                    @register key, method, func\n\n    unbind: (key, method) =>\n        if key not of @keys then return false\n        method = @sanitizeMethod method\n        if not @doesBindingExist key, method then return\n        @unregister key, method\n\n    unbindAll: () =>\n        @unbindMethod method for method in @methods\n        \n$ ->\n    window.Keyboard = new Keyboard()\n    window.Keyboard.generateCodes()"]}